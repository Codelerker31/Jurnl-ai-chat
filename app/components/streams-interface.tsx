"use client"

import type React from "react"
import { useState } from "react"
import { Settings, Plus, Trash2 } from "lucide-react"
import { StreamSettingsModal } from "./stream-settings-modal"
import { useRouter } from "next/navigation"
import { toast } from "@/hooks/use-toast"

interface DatabaseStream {
  id: number
  user_id: string
  topic: string
  frequency: string
  created_at: string
  last_updated_at: string
}

interface Stream {
  id: string
  title: string
  lastUpdated: string
  frequency: string
  description?: string
}

interface StreamsInterfaceProps {
  streams: DatabaseStream[]
  hasError?: boolean
}

// Helper function to format relative time with better precision and readability
function formatRelativeTime(dateString: string): string {
  const date = new Date(dateString)
  const now = new Date()
  const diffInMs = now.getTime() - date.getTime()
  const diffInMinutes = Math.floor(diffInMs / (1000 * 60))
  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))
  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))
  const diffInWeeks = Math.floor(diffInDays / 7)
  const diffInMonths = Math.floor(diffInDays / 30)
  
  // Handle future dates (shouldn't happen normally, but good to be safe)
  if (diffInMs < 0) {
    return "Just updated"
  }
  
  // Less than 1 minute
  if (diffInMinutes < 1) {
    return "Just now"
  }
  
  // Less than 1 hour
  if (diffInMinutes < 60) {
    if (diffInMinutes === 1) {
      return "1 minute ago"
    }
    return `${diffInMinutes} minutes ago`
  }
  
  // Less than 1 day
  if (diffInHours < 24) {
    if (diffInHours === 1) {
      return "1 hour ago"
    }
    return `${diffInHours} hours ago`
  }
  
  // Less than 1 week
  if (diffInDays < 7) {
    if (diffInDays === 1) {
      return "Yesterday"
    }
    return `${diffInDays} days ago`
  }
  
  // Less than 1 month
  if (diffInWeeks < 4) {
    if (diffInWeeks === 1) {
      return "1 week ago"
    }
    return `${diffInWeeks} weeks ago`
  }
  
  // More than 1 month - show months or absolute date
  if (diffInMonths < 12) {
    if (diffInMonths === 1) {
      return "1 month ago"
    }
    return `${diffInMonths} months ago`
  }
  
  // More than 1 year - show absolute date for clarity
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  })
}

// Helper function to transform database streams to UI format
function transformStream(dbStream: DatabaseStream): Stream {
  return {
    id: dbStream.id.toString(),
    title: dbStream.topic,
    lastUpdated: formatRelativeTime(dbStream.last_updated_at),
    frequency: dbStream.frequency.charAt(0).toUpperCase() + dbStream.frequency.slice(1),
    description: undefined // We don't have descriptions in the database yet
  }
}

// SQL setup script constant
const SETUP_SQL = `-- Create the streams table
CREATE TABLE public.streams (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  topic TEXT NOT NULL,
  frequency TEXT DEFAULT 'weekly' NOT NULL,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  last_updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security
ALTER TABLE public.streams ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own streams" ON public.streams FOR ALL USING (auth.uid() = user_id);

-- Create the stream_updates table
CREATE TABLE public.stream_updates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  stream_id BIGINT REFERENCES public.streams(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL,
  generated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security for updates
ALTER TABLE public.stream_updates ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view updates for their own streams" ON public.stream_updates FOR SELECT USING (
  auth.uid() = (SELECT user_id FROM public.streams WHERE id = stream_id)
);`

function StreamCard({ stream, onSettingsClick }: { stream: Stream; onSettingsClick: () => void }) {
  const handleStreamClick = () => {
    // Navigate to stream detail page
    window.location.href = `/streams/${stream.id}`
  }

  const handleSettingsClick = (e: React.MouseEvent) => {
    e.stopPropagation()
    onSettingsClick()
  }

  return (
    <div
      onClick={handleStreamClick}
      className="bg-[#1C1C1C] border border-[#333333] rounded-xl p-6 hover:bg-[#2A2A2A] hover:border-[#444444] transition-all duration-200 cursor-pointer group"
    >
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h3 className="text-lg font-bold text-white mb-2 group-hover:text-[#FFB347] transition-colors">
            {stream.title}
          </h3>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-2">
              <div className={`w-2 h-2 rounded-full ${
                stream.lastUpdated.includes('Just') || stream.lastUpdated.includes('minute') || stream.lastUpdated.includes('hour')
                  ? 'bg-green-500' 
                  : stream.lastUpdated.includes('day') || stream.lastUpdated.includes('Yesterday')
                  ? 'bg-yellow-500'
                  : 'bg-red-500'
              }`} />
              <span className="text-gray-400">Last updated: </span>
              <span className={`font-medium ${
                stream.lastUpdated.includes('Just') || stream.lastUpdated.includes('minute') || stream.lastUpdated.includes('hour')
                  ? 'text-green-400' 
                  : stream.lastUpdated.includes('day') || stream.lastUpdated.includes('Yesterday')
                  ? 'text-yellow-400'
                  : 'text-red-400'
              }`}>
                {stream.lastUpdated}
              </span>
            </div>
            <span className="text-gray-500">â€¢</span>
            <span className="text-gray-400">Frequency: {stream.frequency}</span>
          </div>
          {stream.description && <p className="text-gray-500 text-sm mt-2">{stream.description}</p>}
        </div>
        <button
          onClick={handleSettingsClick}
          className="p-2 text-gray-400 hover:text-white hover:bg-[#333333] rounded-lg transition-colors ml-4"
        >
          <Settings className="w-5 h-5" />
        </button>
      </div>
    </div>
  )
}

export function StreamsInterface({ streams, hasError = false }: StreamsInterfaceProps) {
  const [selectedStream, setSelectedStream] = useState<Stream | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const router = useRouter()

  // Transform database streams to UI format
  const transformedStreams = streams.map(transformStream)

  const handleSettingsClick = (stream: Stream) => {
    setSelectedStream(stream)
    setIsModalOpen(true)
  }

  const handleSaveSettings = (settings: any) => {
    console.log("Saving settings for stream:", selectedStream?.id, settings)
    // Here you would typically update the stream settings
  }

  const handleDeleteStream = async () => {
    if (!selectedStream || isDeleting) return

    setIsDeleting(true)

    try {
      const response = await fetch('/api/mcp/streams', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete_stream',
          stream_id: parseInt(selectedStream.id)
        })
      })

      const data = await response.json()

      if (data.success) {
        toast({
          title: "Stream Deleted",
          description: `Stream "${selectedStream.title}" has been deleted.`,
          variant: "default",
        })
        setIsModalOpen(false)
        router.refresh() // Refresh the page to update the stream list
      } else {
        throw new Error(data.error || 'Failed to delete stream')
      }
    } catch (error) {
      console.error('Error deleting stream:', error)
      toast({
        title: "Error",
        description: "Failed to delete stream. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsDeleting(false)
    }
  }

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-white">My Streams</h1>
        <button 
          onClick={() => {
            console.log('ðŸ”¥ New Stream button clicked!')
            toast({
              title: "How to Create Streams",
              description: "Go to the chat page and click 'Create Stream' next to AI responses.",
              variant: "default",
            })
            // Navigate to chat page
            router.push('/chat')
          }}
          className="bg-[#FF6600] hover:bg-[#e55a00] text-white px-4 py-2 rounded-lg font-medium flex items-center gap-2 transition-colors">
          <Plus className="w-4 h-4" />
          New Stream
        </button>
      </div>

      {/* Error State (if database tables don't exist) */}
      {hasError ? (
        <div className="text-center py-16">
          <div className="text-red-400 mb-4">
            <Settings className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Database Setup Required</h3>
            <p className="text-gray-400 mb-4">
              The streams feature requires database tables to be created.
            </p>
            <div className="bg-[#1C1C1C] border border-[#333333] rounded-xl p-6 text-left max-w-2xl mx-auto">
              <p className="text-sm text-gray-300 mb-3">
                Please run this SQL in your <strong>Supabase Dashboard â†’ SQL Editor</strong>:
              </p>
              <pre className="text-xs text-gray-400 bg-[#0A0A0A] p-4 rounded-lg overflow-x-auto">
                {SETUP_SQL}
              </pre>
              <p className="text-sm text-gray-400 mt-3">
                After running the SQL, refresh this page to start using streams.
              </p>
            </div>
          </div>
        </div>
      ) : (
        <>
          {/* Stream Cards */}
          <div className="space-y-4">
            {transformedStreams.map((stream) => (
              <StreamCard key={stream.id} stream={stream} onSettingsClick={() => handleSettingsClick(stream)} />
            ))}
          </div>

          {/* Empty State (if no streams) */}
          {transformedStreams.length === 0 && (
            <div className="text-center py-16">
              <div className="text-gray-400 mb-4">
                <Settings className="w-16 h-16 mx-auto mb-4 opacity-50" />
                <h3 className="text-xl font-medium mb-2">No streams yet</h3>
                <p className="text-gray-500">Create your first stream to start tracking topics you care about.</p>
              </div>
              <button 
                onClick={() => {
                  console.log('ðŸ”¥ Create Your First Stream button clicked!')
                  toast({
                    title: "How to Create Streams",
                    description: "Ask the AI a question, then click 'Create Stream' next to its response.",
                    variant: "default",
                  })
                  // Navigate to chat page
                  router.push('/chat')
                }}
                className="bg-[#FF6600] hover:bg-[#e55a00] text-white px-6 py-3 rounded-lg font-medium mt-6 transition-colors">
                Create Your First Stream
              </button>
            </div>
          )}
        </>
      )}

      {/* Stream Settings Modal */}
      <StreamSettingsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        streamTitle={selectedStream?.title || ""}
        currentFrequency={selectedStream?.frequency || "Weekly"}
        currentDay="Friday"
        onSave={handleSaveSettings}
        onDelete={handleDeleteStream}
      />
    </div>
  )
} 